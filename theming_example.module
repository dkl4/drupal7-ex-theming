<?php

/**
 * @file
 * Explains how a module declares theme functions, preprocess functions, and
 * templates.
 *
 * The underlying approach is that a module should allow themes to do all
 * rendering, but provide default implementations where appropriate.
 *
 * Modules are also expected to leave data as render arrays as long as possible,
 * leaving rendering to theme functions and templates.
 */

/**
 * Implements hook_menu().
 *
 * The @link menu_example.module Menu Example @endlink provides extensive
 * examples for hook_menu().
 */
function theming_example_menu() {
  $items['examples/theming_example'] = array(
    'title'            => 'Theming Example',
    'description'      => 'Some theming examples.',
    'page callback'    => 'theming_example_page',
    'access callback'  => TRUE,
    'access arguments' => array('access content'),
  );
  $items['examples/theming_example/theming_example_list_page'] = array(
    'title'            => 'Theming a list',
    'page callback'    => 'theming_example_list_page',
    'access arguments' => array('access content'),
    'weight'           => 1,
  );
  $items['examples/theming_example/theming_example_select_form'] = array(
    'title'            => 'Theming a form (select form)',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('theming_example_select_form'),
    'access arguments' => array('access content'),
    'weight'           => 2,
  );
  $items['examples/theming_example/theming_example_text_form'] = array(
    'title'            => 'Theming a form (text form)',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('theming_example_text_form'),
    'access arguments' => array('access content'),
    'weight'           => 3,
  );

  return $items;

}


/**
 * Implements hook_theme().
 *
 * Defines the theming capabilities provided by this module.
 */
// In other words, this module says it provides four themeable types of output :
// - content_array
// - list
// - select_form
// - text_form
function theming_example_theme() {
  return array(
    'theming_example_content_array' => array(
      // We use 'render element' when the item to be passed is a self-describing
      // render array (it will have #theme_wrappers)
      'render element' => 'element',
    ),
    'theming_example_list' => array(
      // We use 'variables' when the item to be passed is an array whose
      // structure must be described here.
      'variables' => array(
        'title' => NULL,
        'items' => NULL,
      ),
    ),
    'theming_example_select_form'  => array(
      'render element' => 'form',
    ),
    'theming_example_text_form'  => array(
      'render element' => 'form',
      // In this one the rendering will be done by a tpl.php file instead of
      // being rendered by a function, so we specify a template.
      'template' => 'theming_example_text_form',
    ),
  );
}




/**
 * Initial landing page explaining the use of the module.
 *
 * We create a render array and specify the theme to be used through the use
 * of #theme_wrappers. With all output, we aim to leave the content as a
 * render array just as long as possible, so that other modules (or the theme)
 * can alter it.
 *
 * @see render_example.module
 * @see form_example_elements.inc
 */
function theming_example_page() {
  // Per theme_theming_example_content_array(), the first line here will be in bold,
  // and the other lines are normal HTML paragraphs.
  $content[] = t('Some examples of pages and forms that are run through theme functions.');
  $content[] = l(t('Simple page with a list'), 'examples/theming_example/theming_example_list_page');
  $content[] = l(t('Simple form 1'), 'examples/theming_example/theming_example_select_form');
  $content[] = l(t('Simple form 2'), 'examples/theming_example/theming_example_text_form');
  // Note this is a "self-describing render array" (has #theme_wrappers) which maps to
  // 'render element' => 'element' in hook_theme above.
  $content['#theme_wrappers'] = array('theming_example_content_array');
  return $content;
}


/**
 * Theme a simple content array.
 *
 * This theme function uses the newer recommended format where a single
 * render array is provided to the theme function.
 */
function theme_theming_example_content_array($variables) {
  $element = $variables['element'];
  $output = '';
  // Here is Drupal 7 API docs for element_childre() function :
  // Identifies the children of an element array, optionally sorted by weight.
  // The children of a element array are those key/value pairs whose key does
  // not start with a '#'. See drupal_render() for details.
  foreach (element_children($element) AS $count) {
    if (! $count) {
      // The first paragraph is bolded.
      $output .= '<p><strong>' . $element[$count] . '</strong></p>';
    }
    else {
      // Following paragraphs are just output as routine paragraphs.
      $output .= '<p>' . $element[$count] . '</p>';
    }
  }
  return $output;
}


/**
 * An example page where the output is supplied as an array which
 * is themed into a list and styled with css.
 *
 * In this case we'll use the core-provided theme_item_list as a #theme_wrapper.
 * Any theme need only override theme_item_list to change the behavior.
 */
function theming_example_list_page() {
  $items = array(
    t('First item'),
    t('Second item'),
    t('Third item'),
    t('Fourth item'),
  );

  // First we'll create a render array that simply uses theme_item_list.
  $title = t("A list returned to be rendered using Drupal's built-in theme('item_list')");
  // Where did 'render_verion' come from? Is this documented in the Drupal API?
  // I get the impression 'render_version' is a key WE chose to use just to show
  // it's the classic (Drupal built-in) render version.
  $build['render_version'] = array(
    // We use #theme here instead of #theme_wrappers because theme_item_list()
    // is the classic type of theme function that does not just assume a
    // render array, but instead has its own properties (#type, #title, #items).
    // So apparently in the build (render?) array there are two types :
    //  - #theme for classic (not a render array)
    //  - #theme_wrappers for new render arrays
    // 'item_list' defined in Drupal core
    // includes/common.inc : 'item_list' => array('variables' => array('items' => array(), 'title' => NULL, 'type' => 'ul', 'attributes' => array()), ),
    // includes/theme.inc  : function theme_item_list($variables) {
    //     Note THEME is prepended to THEME_item_list in the function which defines how to output the HTML
    '#theme'      => 'item_list',  // defined by Drupal core
    '#type'       => 'ul',  // The default type is 'ul'
    // We can easily make sure that a css or js file is present using #attached.
    '#attached'   => array('css' => array(drupal_get_path('module', 'theming_example') . '/theming_example.css')),
    '#title'      => $title,
    '#items'      => $items,
    '#attributes' => array('class' => array('render-version-list'))
  );

  // Now we'll create a render array which uses our OWN list formatter,
  // theme('theming_example_list').
  $title = t("The same list rendered by theming_example's theme('theming_example_list')");
  $build['our_theme_function'] = array(
    '#theme'    => 'theming_example_list',
    '#attached' => array('css' => array(drupal_get_path('module', 'theming_example') . '/theming_example.css')),
    '#title'    => $title,
    '#items'    => $items,
  );
  return $build;
}


/**
 * Theming a simple list.
 *
 * This is just a simple wrapper around theme('item_list') but it's worth
 * showing how a custom theme function can be implemented.
 *
 * @see theme_item_list()
 */
// This is our custom rendition of Drupal's built-in theme_item_list() function.
function theme_theming_example_list($variables) {
  $title = $variables['title'];  // Convenience variable
  $items = $variables['items'];

  // Add the title to the list theme and
  // state the list type. This defaults to 'ol'.
  // Add a css class so that you can modify the list styling.
  // We'll just call Drupal's theme('item_list') to render.

  $variables = array(
    'items' => $items,
    'title' => $title,
    'type' => 'ol',
    // theming_example.css has the following : ol.theming-example-list { list-style-type: upper-alpha; }
    'attributes' => array('class' => 'theming-example-list'),
  );
  // Our "custom" item list theme function only seems to overwrite the type to 'ol',
  // apply a class, and then call Drupal's built-in theme function.
  $output = theme('item_list', $variables);
  return $output;
}

/**
 * A simple form that displays a select box and submit button.
 *
 * This form will be be themed by the 'THEME_theming_example_select_form' theme
 * handler below.
 */
function theming_example_select_form($form, &$form_state) {
  $options = array(
    'newest_first' => t('Newest first'),
    'newest_last'  => t('Newest last'),
    'edited_first' => t('Edited first'),
    'edited_last'  => t('Edited last'),
    'by_name'      => t('By name'),
  );
  $form['choice'] = array(
    '#type'    => 'select',
    '#options' => $options,
    '#title'   => t('Choose which ordering you want'),
  );
  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Go'),
  );
  return $form;
}

function theming_example_select_form_submit($form, &$form_state) {
  drupal_set_message(t('You chose %input', array('%input' => $form_state['values']['choice'])));
}

/**
 * Theming a simple form.
 *
 * Since our form is named theming_example_select_form(), the default
 * #theme function applied to is will be 'THEME_theming_example_select_form'
 * if it exists. The form could also have specified a different
 * #theme.
 *
 * Here we collect the title, theme it manually and
 * empty the form title. We also wrap the form in a div.
 */
// Even if you don't have this theme function, the form looks (and works) fine.
// This theme function only does a couple things :
//   - Spruce up the title a bit with <strong><em>
//   - Putting the 'Go' (Submit) button up on the same line as the drop-down widget.
function theme_theming_example_select_form($variables) {
  $form  = $variables['form'];
  $title = $form['choice']['#title'];
  $form['choice']['#title'] = '';
  $output = '<strong><em>' . $title . '</em></strong>';
  $form['choice']['#prefix'] = '<div class="container-inline">';
  $form['submit']['#suffix'] = '</div>';
  $output .= drupal_render_children($form);
  return $output;
}


