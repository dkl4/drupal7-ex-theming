<?php

/**
 * @file
 * Explains how a module declares theme functions, preprocess functions, and
 * templates.
 *
 * The underlying approach is that a module should allow themes to do all
 * rendering, but provide default implementations where appropriate.
 *
 * Modules are also expected to leave data as render arrays as long as possible,
 * leaving rendering to theme functions and templates.
 */

/**
 * Implements hook_menu().
 *
 * The @link menu_example.module Menu Example @endlink provides extensive
 * examples for hook_menu().
 */
function theming_example_menu() {
  $items['examples/theming_example'] = array(
    'title'            => 'Theming Example',
    'description'      => 'Some theming examples.',
    'page callback'    => 'theming_example_page',
    'access callback'  => TRUE,
    'access arguments' => array('access content'),
  );
  $items['examples/theming_example/theming_example_list_page'] = array(
    'title'            => 'Theming a list',
    'page callback'    => 'theming_example_list_page',
    'access arguments' => array('access content'),
    'weight'           => 1,
  );
  $items['examples/theming_example/theming_example_select_form'] = array(
    'title'            => 'Theming a form (select form)',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('theming_example_select_form'),
    'access arguments' => array('access content'),
    'weight'           => 2,
  );
  $items['examples/theming_example/theming_example_text_form'] = array(
    'title'            => 'Theming a form (text form)',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('theming_example_text_form'),
    'access arguments' => array('access content'),
    'weight'           => 3,
  );

  return $items;

}


/**
 * Implements hook_theme().
 *
 * Defines the theming capabilities provided by this module.
 */
// In other words, this module says it provides four themeable types of output :
// - content_array
// - list
// - select_form
// - text_form
function theming_example_theme() {
  return array(
    'theming_example_content_array' => array(
      // We use 'render element' when the item to be passed is a self-describing
      // render array (it will have #theme_wrappers)
      'render element' => 'element',
    ),
    'theming_example_list' => array(
      // We use 'variables' when the item to be passed is an array whose
      // structure must be described here.
      'variables' => array(
        'title' => NULL,
        'items' => NULL,
      ),
    ),
    'theming_example_select_form'  => array(
      'render element' => 'form',
    ),
    'theming_example_text_form'  => array(
      'render element' => 'form',
      // In this one the rendering will be done by a tpl.php file instead of
      // being rendered by a function, so we specify a template.
      'template' => 'theming_example_text_form',
    ),
  );
}




/**
 * Initial landing page explaining the use of the module.
 *
 * We create a render array and specify the theme to be used through the use
 * of #theme_wrappers. With all output, we aim to leave the content as a
 * render array just as long as possible, so that other modules (or the theme)
 * can alter it.
 *
 * @see render_example.module
 * @see form_example_elements.inc
 */
function theming_example_page() {
  // Per theme_theming_example_content_array(), the first line here will be in bold,
  // and the other lines are normal HTML paragraphs.
  $content[] = t('Some examples of pages and forms that are run through theme functions.');
  $content[] = l(t('Simple page with a list'), 'examples/theming_example/theming_example_list_page');
  $content[] = l(t('Simple form 1'), 'examples/theming_example/theming_example_select_form');
  $content[] = l(t('Simple form 2'), 'examples/theming_example/theming_example_text_form');
  // Note this is a "self-describing render array" (has #theme_wrappers) which maps to
  // 'render element' => 'element' in hook_theme above.
  $content['#theme_wrappers'] = array('theming_example_content_array');
  return $content;
}


/**
 * Theme a simple content array.
 *
 * This theme function uses the newer recommended format where a single
 * render array is provided to the theme function.
 */
function theme_theming_example_content_array($variables) {
  $element = $variables['element'];
  $output = '';
  // Here is Drupal 7 API docs for element_childre() function :
  // Identifies the children of an element array, optionally sorted by weight.
  // The children of a element array are those key/value pairs whose key does
  // not start with a '#'. See drupal_render() for details.
  foreach (element_children($element) AS $count) {
    if (! $count) {
      // The first paragraph is bolded.
      $output .= '<p><strong>' . $element[$count] . '</strong></p>';
    }
    else {
      // Following paragraphs are just output as routine paragraphs.
      $output .= '<p>' . $element[$count] . '</p>';
    }
  }
  return $output;
}